Set-Based Search Model:
    Merge courses and labs into 1 single list labCourseList.    

    Facts is a set of solutions. Set<Fact> Facts;
    Facts start as empty


    Mutation() return newSolution:
        solution = Fact[random(len(Fact))]
        mut = solution.pop(random(len(solution))) 
        mut.slot = randomslot
        solution = solution.add(0,mut)
        newsolution = ortree.guided(solution)
        return newsolution
        
    Combination(random(Fact), random(Fact)) return [newSolution1, newSolution2]:
        //creating solutionA1 != solutionA2 
        solutionA1 = Fact[random(len(Fact))]
        solutionA2 = Fact[random(len(Fact))]
        while solution1 == solution2:
            solution2 = Fact[random(len(Fact))]
        //Generate guides
        solutionG1 = solutionA1[0:len(solutionA1)/2]+solutionA2[len(solutionA1)/2:]
        solutionG2 = reverse(solutionA2[0:len(solutionA1)/2]+solutionA1[len(solutionA1)/2:])
        //Run ortree
        return [ortree.guided(solutionG1),ortree.guided(soluitonG2)]
    
    Tod(A):
        numberKilled = killpercent * currentSetLength
        newFactLength = len(Fact) - numberKilled
        while len(Fact) > newFactLength:
            Fact.remove(highestEvalSolution)

    Create an Eval function to calculate the soft constraint 
       
Set-Based Search Control:
    maxPopulation 
    killpercent
    threshold

    if Fact.isEmpty():
    Or-Tree.depthFirst()


    while True:
        //If we have too many solution, kill of some solution
        if len(Fact) > maxPopulation:
            Tod()
        else: 
            //Randomly choosing between Mutation and Combination
            Random k = random(1-2)
            if k == 1:
                //Mutation return a newSolution that already satisfied the hard constraint checked in Or-Tree
                newSolution = Mutation()
                Fact newFact = new Fact(newSolution)
                newFact.evaluation = Eval(newSolution)
                //Add new solutions
                Facts.add(newFact)
            else:
                //Combination return a list [newSolutionB1, newSolutionB2]
                newSolution [] = Combination()
                //Add new solutions
                for i in range(newSolution):
                    Fact newFact = new Fact(newSolution[i])
                    newFact.evaluation = Eval(newSolution)
                    Facts.add(newFact)
    //Exit the loop if V(eval(s)) <= threshold
    if V(eval(s)) <= threshold:
        break 
return Fact


