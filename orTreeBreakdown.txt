Or-Tree Search Model:
    - Each problem description is a vector of all labs and courses assigned or unassigned to a slot
  	
    **** Variables ****
    - Access to slots, courses, and labs
    - Anything else needed for checkHard()
        - maxLabs
        - maxCourses
        - etc.
    - Structure for holding tree 
  
    **** Functions ****
    checkHard():
        True if hard constraints are partial met 
        
    - Similar to checkHard() but must check everything is assigned 
    solved(s):
        true if s is solved
        - s has all courses and labs assigned 
        - s meets the hard constraints 
        
    - Probably don't need this, just use checkHard()
    unsolved(s):
        true if s is unsolvable
        - s is a (partial) solution that breaks the hard constraints 
        
    - Function to return alternatives
    altern(s, course=s.pr.get(randomNotAssigned)):
        fact = s.pr
        fact.getValue(course)
        children = ArrayList<Prob>
        for slot in slots:
            child = fact.add(course,slot)
            children.add(child)
        return children

    - depth() implements search control K_{\lor_1}
    depth():
    while true:
      if solvable(leaf):
        change leaf to solved
        break
      else if unsolvable(leaf):
        change leaf to unsovlable
      else:
        extend deepest pr==? leaf using alter(s)
    return solved leafnode

    - guided() implments seach control K_{\lor_2}
    guided(G): 
        int depth = 0 

        leafs = ArrayList<Node>
        leafs.add(G[0])
        while true:
            if solvable(leaf):
                return leaf
            else if unsolvable(leaf):
                leafs.remove(leaf)
            else if s==G[depth]:
                depth++
                leafs.add(altern(leaf,G[depth]))
            else:
                depth++
                leafs.add(altern(leaf))
        return null  //We didnt find a solution should never happen
